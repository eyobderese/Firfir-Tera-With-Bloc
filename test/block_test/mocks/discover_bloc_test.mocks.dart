// Mocks generated by Mockito 5.4.4 from annotations
// in firfir_tera/test/unit_test/discover_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:firfir_tera/Domain/Entities/recipe.dart' as _i2;
import 'package:firfir_tera/Domain/Repository%20Interface/recipe_repositery.dart'
    as _i3;
import 'package:image_picker/image_picker.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRecipe_0 extends _i1.SmartFake implements _i2.Recipe {
  _FakeRecipe_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RecipeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecipeRepository extends _i1.Mock implements _i3.RecipeRepository {
  MockRecipeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Recipe>> fetchRecipes(
    String? query,
    String? filter,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchRecipes,
          [
            query,
            filter,
          ],
        ),
        returnValue: _i4.Future<List<_i2.Recipe>>.value(<_i2.Recipe>[]),
      ) as _i4.Future<List<_i2.Recipe>>);

  @override
  _i4.Future<_i2.Recipe> fetchRecipe(String? recipeId) => (super.noSuchMethod(
        Invocation.method(
          #fetchRecipe,
          [recipeId],
        ),
        returnValue: _i4.Future<_i2.Recipe>.value(_FakeRecipe_0(
          this,
          Invocation.method(
            #fetchRecipe,
            [recipeId],
          ),
        )),
      ) as _i4.Future<_i2.Recipe>);

  @override
  _i4.Future<String> saveRecipe({
    required String? name,
    required String? serves,
    required String? cookingTime,
    required String? description,
    required String? category,
    required String? fasting,
    required List<String>? ingredients,
    required List<String>? steps,
    _i5.XFile? image,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveRecipe,
          [],
          {
            #name: name,
            #serves: serves,
            #cookingTime: cookingTime,
            #description: description,
            #category: category,
            #fasting: fasting,
            #ingredients: ingredients,
            #steps: steps,
            #image: image,
          },
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #saveRecipe,
            [],
            {
              #name: name,
              #serves: serves,
              #cookingTime: cookingTime,
              #description: description,
              #category: category,
              #fasting: fasting,
              #ingredients: ingredients,
              #steps: steps,
              #image: image,
            },
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> updateRecipe({
    required String? name,
    required String? serves,
    required String? cookingTime,
    required String? description,
    required String? category,
    required String? fasting,
    required List<String>? ingredients,
    required List<String>? steps,
    required String? recipeId,
    _i5.XFile? image,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRecipe,
          [],
          {
            #name: name,
            #serves: serves,
            #cookingTime: cookingTime,
            #description: description,
            #category: category,
            #fasting: fasting,
            #ingredients: ingredients,
            #steps: steps,
            #recipeId: recipeId,
            #image: image,
          },
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #updateRecipe,
            [],
            {
              #name: name,
              #serves: serves,
              #cookingTime: cookingTime,
              #description: description,
              #category: category,
              #fasting: fasting,
              #ingredients: ingredients,
              #steps: steps,
              #recipeId: recipeId,
              #image: image,
            },
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> deleteRecipe(String? recipeId) => (super.noSuchMethod(
        Invocation.method(
          #deleteRecipe,
          [recipeId],
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #deleteRecipe,
            [recipeId],
          ),
        )),
      ) as _i4.Future<String>);
}
