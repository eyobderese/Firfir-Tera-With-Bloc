// Mocks generated by Mockito 5.4.4 from annotations
// in firfir_tera/test/unit_test/comment_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:firfir_tera/model/comment.dart' as _i4;
import 'package:firfir_tera/Repository/commentRepository.dart' as _i5;
import 'package:firfir_tera/services/comment_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CommentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommentService extends _i1.Mock implements _i2.CommentService {
  MockCommentService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> createComment(
    String? text,
    String? recipeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createComment,
          [
            text,
            recipeId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Comment>> getComments(String? postId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getComments,
          [postId],
        ),
        returnValue: _i3.Future<List<_i4.Comment>>.value(<_i4.Comment>[]),
      ) as _i3.Future<List<_i4.Comment>>);
}

/// A class which mocks [CommentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommentRepository extends _i1.Mock implements _i5.CommentRepository {
  MockCommentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Comment>> getComments(String? postId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getComments,
          [postId],
        ),
        returnValue: _i3.Future<List<_i4.Comment>>.value(<_i4.Comment>[]),
      ) as _i3.Future<List<_i4.Comment>>);

  @override
  _i3.Future<void> addComment(_i4.Comment? comment) => (super.noSuchMethod(
        Invocation.method(
          #addComment,
          [comment],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
